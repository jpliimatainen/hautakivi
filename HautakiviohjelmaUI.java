/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hautakivi;

import java.awt.Checkbox;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ListIterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;


/**
 *
 * @author Juha-Pekka Liimatainen
 */
public class HautakiviohjelmaUI extends JFrame {

    /**
     * Creates new form HautakiviohjelmaUI
     */
    public HautakiviohjelmaUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
                       
    private void initComponents() {

        buttonGroupKirjasinTyyppi = new ButtonGroup();
        buttonGroupPinta = new ButtonGroup();
        jTabbedPane1 = new JTabbedPane();
        muoto = new JPanel();
        leveysLbl = new JLabel("Leveys:");
        korkeusLbl = new JLabel("Korkeus:");
        kivenLeveysTxt = new JTextField("80");
        kivenKorkeusTxt = new JTextField("60");
        cmLeveysLbl = new JLabel("cm");
        cmKorkeusLbl = new JLabel("cm");
        tekstitPanel = new JPanel();
        sukunimiLbl = new JLabel("Sukunimi");
        vapaaTekstiLbl = new JLabel("Vapaa teksti");
        etunimiLbl = new JLabel("Etunimet");
        osLbl = new JLabel("Os");
        syntymaAikaLbl = new JLabel("Syntymäaika");
        kuolinAikaLbl = new JLabel("Kuolinaika");
        sukunimiTxt = new JTextField("Meikäläinen");
        vapaaTxt1 = new JTextField();
        vapaaTxt2 = new JTextField();
        vapaaTxt3 = new JTextField();
        vapaaTxt4 = new JTextField();
        etunimiTxt1 = new JTextField("Matti Heikki");
        etunimiTxt2 = new JTextField();
        etunimiTxt3 = new JTextField();
        etunimiTxt4 = new JTextField();
        osTxt1 = new JTextField();
        osTxt2 = new JTextField();
        osTxt3 = new JTextField();
        osTxt4 = new JTextField();
        syntymaAikaTxt1 = new JTextField("1.1.1930");
        syntymaAikaTxt2 = new JTextField();
        syntymaAikaTxt3 = new JTextField();
        syntymaAikaTxt4 = new JTextField();
        kuolinAikaTxt1 = new JTextField("31.12.2010");
        kuolinAikaTxt2 = new JTextField();
        kuolinAikaTxt3 = new JTextField();
        kuolinAikaTxt4 = new JTextField();
        yhteystiedotPanel = new JPanel();
        yhteysOtsikkoLbl = new JLabel("Myyjän yhteystiedot");
        yhteysNimiTxt = new JTextField();
        yhteysNimiLbl = new JLabel("Nimi");
        yhteysPuhelinLbl = new JLabel("Puhelin");
        yhteysEmailLbl = new JLabel("Sähköposti");
        yhteysPuhelinTxt = new JTextField();
        yhteysEmailTxt = new JTextField();
        copyLbl = new JLabel("<html>Hautakiviohjelma<br />Versio 1.0<br />© Ideaomena ja<br />Juha-Pekka<br />Liimatainen<br />2014-2015</html>");
        valitseTaustaLbl = new JLabel("Valitse tausta:");
        valitseMuotoLbl = new JLabel("Valitse muoto:");
        valitseKivenVariLbl = new JLabel("Valitse väri:");
        valitseFonttiVariLbl = new JLabel("Valitse väri:");
        esikatseluPanel = new BackgroundPanel(System.getProperty("user.home") + "/Documents/Hautakiviohjelma/kuvat/taustat/tausta1.jpg");
        vaihdaKokoButton = new JButton("Vaihda koko");
        muotoValintaPanel = new JPanel();
        muotoScrollPane = new JScrollPane();
        kayttoOikeus = new JLabel("<html>Ohjelman käyttöoikeuden omistaa:<br />Yritys X</html>");
        kaiverrettuna = new JRadioButton("Kaiverrettuna", true);
        metallikirjasin = new JRadioButton("Metallikirjasin", false);
        kokoLbl = new JLabel("Koko:");
        kirjasinKokoPlusButton = new ControlButton("+", "kirjasinKoko", ControlButton.ButtonType.PLUSBUTTON);
        kirjasinKokoMinusButton = new ControlButton("-", "kirjasinKoko", ControlButton.ButtonType.MINUSBUTTON);
        kirjasinLeveysLbl = new JLabel("Leveys:");
        kirjasinLeveysPlusButton = new ControlButton("+", "kirjasinLeveys", ControlButton.ButtonType.PLUSBUTTON);
        kirjasinLeveysMinusButton = new ControlButton("-", "kirjasinLeveys", ControlButton.ButtonType.MINUSBUTTON);
        tasausLbl = new JLabel("Tasaus:");
        vasenButton = new ControlButton("", "kirjasinTasaus", ControlButton.ButtonType.LEFT);
        keskitettyButton = new ControlButton("", "kirjasinTasaus", ControlButton.ButtonType.CENTER);
        oikeaButton = new ControlButton("", "kirjasinTasaus", ControlButton.ButtonType.RIGHT);
        valitseFonttiLbl = new JLabel("Fontti:");
        valitseVariPanel = new JPanel();
        mustaLbl = new EsikatseluJLabel("musta", "musta");
        kultaLbl = new EsikatseluJLabel("kulta", "kulta");
        hopeaLbl = new EsikatseluJLabel("hopea", "hopea");
        fontListScrollPane = new JScrollPane();
        esikatseluHenkilo = new EsikatseluHenkilo[Hautakivi.HENKILOMAARA];
        esikatseluHenkiloPanel = new EsikatseluHenkiloPanel[Hautakivi.HENKILOMAARA];
        esikatseluYhteystiedotPanel = new JPanel();
        koristeAlatyyppiLbl = new JLabel();
        koristeTyyppiLbl = new JLabel();
        koristeValintaPanel = new JPanel();
        koristeScrollPane = new JScrollPane();
        koristeet = new JPanel();
        esikatseluKoristeLabel = new EsikatseluJLabel[Hautakivi.KORISTEMAARA];
        valitseKoristeLbl = new JLabel("Valitse koriste:");
        koristeKokoLbl = new JLabel("Koko:");
        koristeKokoPlusButton = new ControlButton("+", "koristeKoko", ControlButton.ButtonType.PLUSBUTTON);
        koristeKokoMinusButton = new ControlButton("-", "koristeKoko", ControlButton.ButtonType.MINUSBUTTON); 
        koristeKiertoLbl = new JLabel("Kierto:");
        koristeKiertoPlusButton = new ControlButton("+", "koristeKierto", ControlButton.ButtonType.PLUSBUTTON);
        koristeKiertoMinusButton = new ControlButton("-", "koristeKierto", ControlButton.ButtonType.MINUSBUTTON);
        koristePinossaLbl = new JLabel("Pinossa:");
        koristePinossaPlusButton = new ControlButton("+", "koristePinossa", ControlButton.ButtonType.PLUSBUTTON);
        koristePinossaMinusButton = new ControlButton("-", "koristePinossa", ControlButton.ButtonType.MINUSBUTTON);
        poistaKoristeButton = new JButton("Poista koriste");
        metallikirjasinAlaTyyppiLbl = new JLabel();
        metallikirjasinTyyppiLbl = new JLabel();
        metallikirjasinEsikatselu = new EsikatseluJLabel();
        metallikirjasinEsikatseluLbl = new JLabel("Fontin esikatselu:");
        vaihdaMetallikirjasinFontti = new JButton("Vaihda fontti");
        esikatseluSukunimiMetallikirjasin = new SukunimiPanel();
        tulosta = new JButton("Tulosta", new ImageIcon(System.getProperty("user.home") + "/Documents/Hautakiviohjelma/kuvat/ikonit/tulosta.png"));
        vaihdaKaiverrettukirjasinFontti = new JButton("Vaihda fontti");
        leftPanel = new JPanel();
        saveButton = new JButton("Tallenna...");
        openButton = new JButton("Avaa...");
        printButton = new JButton("Tulosta...");
        imageSaveButton = new JButton("Kuvana...");
        tausta = new JPanel();
        taustaValintaPanel = new JPanel();
        taustaScrollPane = new JScrollPane();
        kivenVari = new JPanel();
        kivenVariValintaPanel = new JPanel();
        kivenVariScrollPane = new JScrollPane();
        sahattu = new JRadioButton("Sahattu", false);
        hiottu = new JRadioButton("Hiottu", false);
        louhittu = new JRadioButton("Louhittu", true);
        pintaLbl = new JLabel("Pinta:");
        vapaaTeksti = new Checkbox("", true);
        etunimi = new Checkbox("", true);
        os = new Checkbox("", true);
        syntymaAika = new Checkbox("", true);
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hautakiviohjelma - Yritys X");
        setPreferredSize(new Dimension(1280, 960));

        jTabbedPane1.setBorder(BorderFactory.createTitledBorder(""));
        
        /* Tausta tab */
        tausta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        taustaValintaPanel.setOpaque(false);
        
        /* Muoto tab */
        muoto.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        muotoValintaPanel.setOpaque(false);
        
        sahattu.setActionCommand("sahattu");
        hiottu.setActionCommand("hiottu");
        louhittu.setActionCommand("louhittu");
        
        buttonGroupPinta.add(sahattu);
        buttonGroupPinta.add(hiottu);
        buttonGroupPinta.add(louhittu);

        /* Tekstit tab */
        tekstitPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        
        kaiverrettuna.setActionCommand("kaiverrettuna");
        metallikirjasin.setActionCommand("metallikirjasin");
        
        buttonGroupKirjasinTyyppi.add(kaiverrettuna);
        buttonGroupKirjasinTyyppi.add(metallikirjasin);

        vasenButton.setIcon(new ImageIcon(System.getProperty("user.home") + "/Documents/Hautakiviohjelma/kuvat/ikonit/alignment-left-icon.png"));
        keskitettyButton.setIcon(new ImageIcon(System.getProperty("user.home") + "/Documents/Hautakiviohjelma/kuvat/ikonit/alignment-center-icon.png"));
        oikeaButton.setIcon(new ImageIcon(System.getProperty("user.home") + "/Documents/Hautakiviohjelma/kuvat/ikonit/alignment-right-icon.png"));
        
        vasenButton.setToolTipText("Tasaa vasemmalle");
        keskitettyButton.setToolTipText("Keskitä");
        oikeaButton.setToolTipText("Tasaa oikealle");

        mustaLbl.setBackground(new Color(0, 0, 0));
        mustaLbl.setForeground(new Color(0, 0, 0));
        mustaLbl.setMaximumSize(new Dimension(30, 30));
        mustaLbl.setMinimumSize(new Dimension(30, 30));
        mustaLbl.setOpaque(true);
        mustaLbl.setToolTipText("Musta");
        mustaLbl.setPreferredSize(new Dimension(30, 30));
        mustaLbl.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));

        kultaLbl.setBackground(new Color(238, 232, 170));
        kultaLbl.setForeground(new Color(238, 232, 170));
        kultaLbl.setMaximumSize(new Dimension(30, 30));
        kultaLbl.setMinimumSize(new Dimension(30, 30));
        kultaLbl.setOpaque(true);
        kultaLbl.setToolTipText("Kulta");
        kultaLbl.setPreferredSize(new Dimension(30, 30));
        kultaLbl.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));


        hopeaLbl.setBackground(new Color(192, 192, 192));
        hopeaLbl.setForeground(new Color(192, 192, 192));
        hopeaLbl.setMaximumSize(new Dimension(30, 30));
        hopeaLbl.setMinimumSize(new Dimension(30, 30));
        hopeaLbl.setOpaque(true);
        hopeaLbl.setToolTipText("Hopea");
        hopeaLbl.setPreferredSize(new Dimension(30, 30));
        hopeaLbl.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));
        
        fontListModel = new DefaultListModel();
        String[] fontString = { "Alex Brush", "Black Chancery", "Coventry Script", "Open Sans Condensed", "Sanvito Roman", 
            "Century Old Style", "Century Schoolbook" };
        
        for (String font : fontString) {
            fontListModel.addElement(font);
        }
        fontList = new JList(fontListModel);
        
        fontList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        fontList.setSelectedIndex(4);
        
        ListCellRenderer renderer = new MyListCellRenderer();
        fontList.setCellRenderer(renderer);
        
        fontListScrollPane.setViewportView(fontList);
       
        metallikirjasinTyyppiLbl.setText("Valitse tyyppi:");
        metallikirjasinAlaTyyppiLbl.setText("Valitse alatyyppi:");
        metallikirjasinTyyppiLbl.setVisible(false);
        metallikirjasinAlaTyyppiLbl.setVisible(false);
        
        String[] metallikirjasinTyypit = { "Antikva", "Groteski", "Kapea Antikva", "Leveä Antikva" };
        String[] metallikirjasinAlaTyypit = { "Kirkas", "Kromaus", "Taidepatina", "Tumma patina" };
        
        metallikirjasinTyyppiCbox = new JComboBox(metallikirjasinTyypit);
        metallikirjasinTyyppiCbox.setSelectedIndex(0);
        metallikirjasinTyyppiCbox.setVisible(false);

        metallikirjasinAlaTyyppiCbox = new JComboBox(metallikirjasinAlaTyypit);
        metallikirjasinAlaTyyppiCbox.setSelectedIndex(0);
        metallikirjasinAlaTyyppiCbox.setVisible(false);
        
        metallikirjasinEsikatseluLbl.setVisible(false);
        metallikirjasinEsikatselu.setVisible(false);
        
        vaihdaMetallikirjasinFontti.setVisible(false);
        vaihdaKaiverrettukirjasinFontti.setVisible(false);
        
        
        /* Koristeet tab */
        koristeet.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        
        koristeTyyppiLbl.setText("Valitse tyyppi:");
        koristeAlatyyppiLbl.setText("Valitse alatyyppi:");
        
        String[] koristeTyypit = {"Enkelit", "Holvikehykset", "Kukat", "Liekit ja lehvät", "Linnut", "Lyhtykehykset", "Lyhtykehykset risti", 
            "Muistolaatat pohjat", "Muut symbolit", "Ornamentit", "Pronssilyhdyt", "Puut ja tähkät", "Ristit", "Veteraanitunnukset", "Yhteenvaletut tekstit" };
        
        /* alatyypit */
        String[] koristeAlatyypit = { "Kirkas", "Kromaus", "Taidepatina", "Tumma patina" };
        String[] koristeAlatyypit2 = { "Kohoval. laattapohjat", "Levylle kaiv. laattapohjat", "Rst laatta",  "Valetut laatat kaiv. teksti"  };
        
        koristeTyyppiCbox = new JComboBox(koristeTyypit);
        koristeTyyppiCbox.setSelectedIndex(0);

        koristeAlatyyppiCbox = new JComboBox(koristeAlatyypit);
        koristeAlatyyppiCbox.setSelectedIndex(0);
        
        koristeAlatyyppiCbox2 = new JComboBox(koristeAlatyypit2);
        koristeAlatyyppiCbox2.setSelectedIndex(0);
        koristeAlatyyppiCbox2.setVisible(false);
        
     
        /* Yhteystiedot tab */
        yhteystiedotPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        yhteysOtsikkoLbl.setFont(new Font("Tahoma", 1, 12)); // NOI18N
        yhteysOtsikkoLbl.setText("Myyjän yhteystiedot");

        yhteysNimiLbl.setText("Nimi:");
        yhteysPuhelinLbl.setText("Puhelin:");
        yhteysEmailLbl.setText("Sähköposti:");
        
        /* Copyright text */
        copyLbl.setFont(new Font("Arial", 1, 12));
        copyLbl.setForeground(new Color(0, 0, 255));
        copyLbl.setMaximumSize(new Dimension(100, 90));
        copyLbl.setMinimumSize(new Dimension(100, 90));
        copyLbl.setPreferredSize(new Dimension(100, 90));

        kayttoOikeus.setFont(new Font("Arial", 1, 12));
        kayttoOikeus.setForeground(new Color(255, 0, 0));
        kayttoOikeus.setMaximumSize(new Dimension(100, 90));
        kayttoOikeus.setMinimumSize(new Dimension(100, 90));
        kayttoOikeus.setPreferredSize(new Dimension(100, 90));

        /* preview window */
        esikatseluPanel.setBorder(BorderFactory.createTitledBorder(null, "Esikatselu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        
        
        /* LOAD IMAGES */
        /* helper variables */
        String path, path2;
        Image[] tmpImages;
        
        /* load tausta images from directory */
        path = System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\kuvat\\taustat\\";
        ImageArrays.taustaImages = loadImages(path);
        tmpImages = scaleImages(ImageArrays.taustaImages, 0.15f);
        EsikatseluJLabel[] taustaEsikatseluLabels = createThumbnailImages(tmpImages, "tausta", false);
        
        /* load shape images from directory */
        path = System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\kuvat\\muodot\\";
        ImageArrays.muotoImages = loadDescriptionImages(path);
        EsikatseluJLabel[] muotoEsikatseluLabels = createThumbnailImages(ImageArrays.muotoImages);
        
        /* load jalusta images from directory */
        path = System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\kuvat\\jalusta1.png";
        path2 = System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\kuvat\\jalusta2.png";
        try {
            ImageArrays.jalustaImages[0] = ImageIO.read(new File(path));
            ImageArrays.jalustaImages[1] = ImageIO.read(new File(path2));
        }
        catch (IOException e) {
            System.out.println("Opening image failed: " + e.getMessage());
        }
        
        /* load vari images from directory */
        path = System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\kuvat\\varit\\";
        ImageArrays.kivenVariImages = loadImages(path);
        tmpImages = scaleImages(ImageArrays.kivenVariImages, 0.3f);
        EsikatseluJLabel[] kivenVariEsikatseluLabels = createThumbnailImages(tmpImages, "kivenVari", false);
        
        /* load enkelikoristeet kirkas from directory */
        path = System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\kuvat\\koristeet\\Enkelit\\2_Kirkas\\";
        ImageArrays.enkelitKirkasImages = loadImages(path); 
        tmpImages = scaleImages(ImageArrays.enkelitKirkasImages, 0.15f);
        ImageArrays.enkelitKirkasThumbnails = createThumbnailImages(tmpImages, "enkelitKirkas", true);
        
        /* download Antikva kirkas fonts */
        path = System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\fontit\\3_Antikva\\2_Kirkas\\";
        ImageArrays.antikvaKirkasImages = loadFontImages(path); 
        

         /* init fonts array */
        int j = 0;
        MyFonts.fontLib[j++] = MyFonts.addFonts(System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\fontit\\alex-brush-regular.ttf");
        MyFonts.fontLib[j++] = MyFonts.addFonts(System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\fontit\\black-chancery.ttf");
        MyFonts.fontLib[j++] = MyFonts.addFonts(System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\fontit\\coventry-script.ttf");
        MyFonts.fontLib[j++] = MyFonts.addFonts(System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\fontit\\openSans-condensed.ttf");
        MyFonts.fontLib[j++] = MyFonts.addFonts(System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\fontit\\sanvito-roman.otf");
        MyFonts.fontLib[j++] = MyFonts.addFonts(System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\fontit\\centold.ttf");
        MyFonts.fontLib[j] = MyFonts.addFonts(System.getProperty("user.home") + "\\Documents\\Hautakiviohjelma\\fontit\\century2.ttf");
        
        /* initialize hautakivi object */
        Hautakivi hautakivi = new Hautakivi();
        
         /* initialize muoto image */
        Image muotoImage = HautakiviShapes.createHautakiviShape(0, hautakivi.getKivenLeveys(), hautakivi.getKivenKorkeus(), 
                "suorakulmio.png", false, false, true);
        
        
        /* PREVIEW COMPONENTS */
        /* muoto */
        esikatseluMuotoPanel = new MuotoJPanel(muotoImage);
        
        /* sukunimi */
        esikatseluSukunimi = new EsikatseluSukunimi(MyFonts.fontLib[hautakivi.getSukunimiFontIndex()].deriveFont(hautakivi.getSukunimiFontSize()), 
                hautakivi.getSukunimiFontColor(), hautakivi.getSukunimi());
  
        
        /* henkilö */
        Henkilo tmpHenkilo = hautakivi.getHenkilo(0);
        
        esikatseluHenkilo[0] = new EsikatseluHenkilo(tmpHenkilo.getVapaaTeksti(), tmpHenkilo.getEtunimet(), tmpHenkilo.getOs(), 
                tmpHenkilo.getSyntymaAika(), tmpHenkilo.getKuolinAika(), 0);
        
        /* initialize empty henkilos */
        for (j=1; j<Hautakivi.HENKILOMAARA; j++) {
            tmpHenkilo = hautakivi.getHenkilo(j);
            esikatseluHenkilo[j] = new EsikatseluHenkilo(tmpHenkilo.getVapaaTeksti(), tmpHenkilo.getEtunimet(), tmpHenkilo.getOs(), 
                tmpHenkilo.getSyntymaAika(), tmpHenkilo.getKuolinAika(), j);
        }
        
        Font[] henkiloFont = new Font[Hautakivi.HENKILOMAARA];
        
        for (j=0; j<Hautakivi.HENKILOMAARA; j++) {
            henkiloFont[j] = MyFonts.fontLib[4].deriveFont(20f);
        }
        
        for (j=0; j<Hautakivi.HENKILOMAARA; j++) {
            esikatseluHenkilo[j].setFontKaiverrettu(henkiloFont[j]);
            esikatseluHenkilo[j].setForegroundKaiverrettu(new Color(238, 232, 170));
            esikatseluHenkilo[j].setOpaque(false);
        }

        for (j=0; j<Hautakivi.HENKILOMAARA; j++) {
            esikatseluHenkiloPanel[j] = new EsikatseluHenkiloPanel(j);
            esikatseluHenkiloPanel[j].setOpaque(false);
            esikatseluHenkiloPanel[j].setLayout(new BoxLayout(esikatseluHenkiloPanel[j], BoxLayout.PAGE_AXIS));
        }
        
        for (j=0; j<Hautakivi.HENKILOMAARA; j++) {
            esikatseluHenkiloPanel[j].add(esikatseluHenkilo[j].getVapaaTekstiKaiverrettu());
            esikatseluHenkiloPanel[j].add(esikatseluHenkilo[j].getVapaaTekstiMetallikirjasin());
            esikatseluHenkilo[j].getVapaaTekstiMetallikirjasin().setVisible(false);
            esikatseluHenkiloPanel[j].add(esikatseluHenkilo[j].getEtunimetKaiverrettu());
            esikatseluHenkiloPanel[j].add(esikatseluHenkilo[j].getEtunimetMetallikirjasin());
            esikatseluHenkilo[j].getEtunimetMetallikirjasin().setVisible(false);
            esikatseluHenkiloPanel[j].add(esikatseluHenkilo[j].getOsKaiverrettu());
            esikatseluHenkiloPanel[j].add(esikatseluHenkilo[j].getOsMetallikirjasin());
            esikatseluHenkilo[j].getOsMetallikirjasin().setVisible(false);
            
            if (!"*  †".equals(esikatseluHenkilo[j].getSyntymaJaKuolinAikaKaiverrettu().getText())) {
                esikatseluHenkiloPanel[j].add(esikatseluHenkilo[j].getSyntymaJaKuolinAikaKaiverrettu());
            }
            else {
                esikatseluHenkiloPanel[j].add(esikatseluHenkilo[j].resetSyntymaJaKuolinAikaKaiverrettu().getSyntymaJaKuolinAikaKaiverrettu());
            }
            esikatseluHenkiloPanel[j].add(esikatseluHenkilo[j].getSyntymaJaKuolinAikaMetallikirjasin());
            esikatseluHenkilo[j].getSyntymaJaKuolinAikaMetallikirjasin().setVisible(false);
            
            esikatseluHenkilo[j].getVapaaTekstiKaiverrettu().setAlignmentX(Component.CENTER_ALIGNMENT);
            esikatseluHenkilo[j].getEtunimetKaiverrettu().setAlignmentX(Component.CENTER_ALIGNMENT);
            esikatseluHenkilo[j].getOsKaiverrettu().setAlignmentX(Component.CENTER_ALIGNMENT);
            esikatseluHenkilo[j].getSyntymaJaKuolinAikaKaiverrettu().setAlignmentX(Component.CENTER_ALIGNMENT);
        }
        
        /* koristeet */
        for (j=0; j<Hautakivi.KORISTEMAARA; j++) {
            esikatseluKoristeLabel[j] = new EsikatseluJLabel();
        }
        
        /* yhteystiedot */
        esikatseluYhteystiedotLabel = new EsikatseluJLabel("Myyjän yhteystiedot:", "yhteystiedotLabel");
        esikatseluYhteystiedotNimi = new EsikatseluJLabel(hautakivi.getYhteysNimi(), "yhteystiedotNimi");
        esikatseluYhteystiedotPuhelin = new EsikatseluJLabel(hautakivi.getYhteysPuhelin(), "yhteystiedotPuhelin");
        esikatseluYhteystiedotEmail = new EsikatseluJLabel(hautakivi.getYhteysEmail(), "yhteystiedotEmail");
        
        esikatseluYhteystiedotLabel.setFont(new Font("Arial", 1, 14));
        esikatseluYhteystiedotNimi.setFont(new Font("Arial", 1, 14));
        esikatseluYhteystiedotPuhelin.setFont(new Font("Arial", 1, 14));
        esikatseluYhteystiedotEmail.setFont(new Font("Arial", 1, 14));
        
        esikatseluYhteystiedotLabel.setForeground(new Color(0, 0, 255));
        esikatseluYhteystiedotNimi.setForeground(new Color(0, 0, 255));
        esikatseluYhteystiedotPuhelin.setForeground(new Color(0, 0, 255));
        esikatseluYhteystiedotEmail.setForeground(new Color(0, 0, 255));
        
        /* ADD EVENT LISTENERS */
        /* Add mouselistener to tausta images */
        for (EsikatseluJLabel image: taustaEsikatseluLabels) {
            image.addMouseListener(new TaustaMouseEventListener(esikatseluPanel, esikatseluYhteystiedotLabel, 
                    esikatseluYhteystiedotNimi, esikatseluYhteystiedotPuhelin, esikatseluYhteystiedotEmail, hautakivi));
        }
        
        /* Add mouselistener to muoto images */
        for (EsikatseluJLabel image: muotoEsikatseluLabels) {
            image.addMouseListener(new MuotoMouseEventListener(esikatseluMuotoPanel, 
                    pintaLbl, sahattu, hiottu, louhittu, hautakivi));
        }
        
        /* Add mouselistener to vari images */
        for (EsikatseluJLabel image: kivenVariEsikatseluLabels) {
            image.addMouseListener(new KivenVariMouseEventListener(esikatseluMuotoPanel, hautakivi));
        }
        
        /* add button listener to change width and height of hautakivi */
        vaihdaKokoButton.addActionListener(new MuotoActionListener(kivenLeveysTxt, kivenKorkeusTxt, esikatseluMuotoPanel, hautakivi));
        
        /* add radiobutton listeners to pinnan valinta */
        sahattu.addActionListener(new VaihdaPintaTyyppiActionListener(esikatseluMuotoPanel, hautakivi));
        hiottu.addActionListener(new VaihdaPintaTyyppiActionListener(esikatseluMuotoPanel, hautakivi));
        louhittu.addActionListener(new VaihdaPintaTyyppiActionListener(esikatseluMuotoPanel, hautakivi));
        
        /* add document listener to textfields */
        sukunimiTxt.getDocument().addDocumentListener(new TekstitDocumentListener(sukunimiTxt, esikatseluSukunimi, hautakivi));
        
        vapaaTxt1.getDocument().addDocumentListener(new TekstitDocumentListener(vapaaTxt1, esikatseluHenkilo[0].getVapaaTekstiKaiverrettu(), 
                esikatseluHenkiloPanel[0], 0, hautakivi));
        vapaaTxt2.getDocument().addDocumentListener(new TekstitDocumentListener(vapaaTxt2, esikatseluHenkilo[1].getVapaaTekstiKaiverrettu(), 
                esikatseluHenkiloPanel[1], 1, hautakivi));
        vapaaTxt3.getDocument().addDocumentListener(new TekstitDocumentListener(vapaaTxt3, esikatseluHenkilo[2].getVapaaTekstiKaiverrettu(), 
                esikatseluHenkiloPanel[2], 2, hautakivi));
        vapaaTxt4.getDocument().addDocumentListener(new TekstitDocumentListener(vapaaTxt4, esikatseluHenkilo[3].getVapaaTekstiKaiverrettu(), 
                esikatseluHenkiloPanel[3], 3, hautakivi));
        
        etunimiTxt1.getDocument().addDocumentListener(new TekstitDocumentListener(etunimiTxt1, esikatseluHenkilo[0].getEtunimetKaiverrettu(), 
                esikatseluHenkiloPanel[0], 0, hautakivi));
        etunimiTxt2.getDocument().addDocumentListener(new TekstitDocumentListener(etunimiTxt2, esikatseluHenkilo[1].getEtunimetKaiverrettu(), 
                esikatseluHenkiloPanel[1], 1, hautakivi));
        etunimiTxt3.getDocument().addDocumentListener(new TekstitDocumentListener(etunimiTxt3, esikatseluHenkilo[2].getEtunimetKaiverrettu(), 
                esikatseluHenkiloPanel[2], 2, hautakivi));
        etunimiTxt4.getDocument().addDocumentListener(new TekstitDocumentListener(etunimiTxt4, esikatseluHenkilo[3].getEtunimetKaiverrettu(), 
                esikatseluHenkiloPanel[3], 3, hautakivi));
        
        osTxt1.getDocument().addDocumentListener(new TekstitDocumentListener(osTxt1, esikatseluHenkilo[0].getOsKaiverrettu(), 
                esikatseluHenkiloPanel[0], 0, hautakivi));
        osTxt2.getDocument().addDocumentListener(new TekstitDocumentListener(osTxt2, esikatseluHenkilo[1].getOsKaiverrettu(), 
                esikatseluHenkiloPanel[1], 1, hautakivi));
        osTxt3.getDocument().addDocumentListener(new TekstitDocumentListener(osTxt3, esikatseluHenkilo[2].getOsKaiverrettu(), 
                esikatseluHenkiloPanel[2], 2, hautakivi));
        osTxt4.getDocument().addDocumentListener(new TekstitDocumentListener(osTxt4, esikatseluHenkilo[3].getOsKaiverrettu(), 
                esikatseluHenkiloPanel[3], 3, hautakivi));
        
        syntymaAikaTxt1.getDocument().addDocumentListener(new TekstitDocumentListener(syntymaAikaTxt1, kuolinAikaTxt1, 
                esikatseluHenkilo[0].getSyntymaJaKuolinAikaKaiverrettu(), esikatseluHenkiloPanel[0], 0, hautakivi));
        syntymaAikaTxt2.getDocument().addDocumentListener(new TekstitDocumentListener(syntymaAikaTxt2, kuolinAikaTxt2, 
                esikatseluHenkilo[1].getSyntymaJaKuolinAikaKaiverrettu(), esikatseluHenkiloPanel[1], 1, hautakivi));
        syntymaAikaTxt3.getDocument().addDocumentListener(new TekstitDocumentListener(syntymaAikaTxt3, kuolinAikaTxt3, 
                esikatseluHenkilo[2].getSyntymaJaKuolinAikaKaiverrettu(), esikatseluHenkiloPanel[2], 2, hautakivi));
        syntymaAikaTxt4.getDocument().addDocumentListener(new TekstitDocumentListener(syntymaAikaTxt4, kuolinAikaTxt4, 
                esikatseluHenkilo[3].getSyntymaJaKuolinAikaKaiverrettu(), esikatseluHenkiloPanel[3], 3, hautakivi));
        
        kuolinAikaTxt1.getDocument().addDocumentListener(new TekstitDocumentListener(syntymaAikaTxt1, kuolinAikaTxt1, 
                esikatseluHenkilo[0].getSyntymaJaKuolinAikaKaiverrettu(), esikatseluHenkiloPanel[0], 0, hautakivi));
        kuolinAikaTxt2.getDocument().addDocumentListener(new TekstitDocumentListener(syntymaAikaTxt2, kuolinAikaTxt2, 
                esikatseluHenkilo[1].getSyntymaJaKuolinAikaKaiverrettu(), esikatseluHenkiloPanel[1], 1, hautakivi));
        kuolinAikaTxt3.getDocument().addDocumentListener(new TekstitDocumentListener(syntymaAikaTxt3, kuolinAikaTxt3, 
                esikatseluHenkilo[2].getSyntymaJaKuolinAikaKaiverrettu(), esikatseluHenkiloPanel[2], 2, hautakivi));
        kuolinAikaTxt4.getDocument().addDocumentListener(new TekstitDocumentListener(syntymaAikaTxt4, kuolinAikaTxt4, 
                esikatseluHenkilo[3].getSyntymaJaKuolinAikaKaiverrettu(), esikatseluHenkiloPanel[3], 3, hautakivi));
        
        yhteysNimiTxt.getDocument().addDocumentListener(new YhteystiedotDocumentListener(yhteysNimiTxt, esikatseluYhteystiedotNimi, 
                esikatseluYhteystiedotPanel, hautakivi));
        yhteysPuhelinTxt.getDocument().addDocumentListener(new YhteystiedotDocumentListener(yhteysPuhelinTxt, esikatseluYhteystiedotPuhelin, 
                esikatseluYhteystiedotPanel, hautakivi));
        yhteysEmailTxt.getDocument().addDocumentListener(new YhteystiedotDocumentListener(yhteysEmailTxt, esikatseluYhteystiedotEmail, 
                esikatseluYhteystiedotPanel, hautakivi));
        
        /* add radiobutton listeners to kirjasin valinta */
        kaiverrettuna.addActionListener(new VaihdaKirjasinTyyppiActionListener(valitseFonttiVariLbl, valitseVariPanel, fontListScrollPane, valitseFonttiLbl, 
            metallikirjasinTyyppiLbl, metallikirjasinTyyppiCbox, metallikirjasinAlaTyyppiLbl, metallikirjasinAlaTyyppiCbox, metallikirjasinEsikatseluLbl, 
            metallikirjasinEsikatselu, vaihdaMetallikirjasinFontti, vaihdaKaiverrettukirjasinFontti, sukunimiTxt, vapaaTxt1, vapaaTxt2, vapaaTxt3, vapaaTxt4, etunimiTxt1, 
            etunimiTxt2, etunimiTxt3, etunimiTxt4, osTxt1, osTxt2, osTxt3, osTxt4, syntymaAikaTxt1, syntymaAikaTxt2, syntymaAikaTxt3, syntymaAikaTxt4, kuolinAikaTxt1, 
            kuolinAikaTxt2, kuolinAikaTxt3, kuolinAikaTxt4, esikatseluSukunimi, esikatseluHenkiloPanel));
        
        metallikirjasin.addActionListener(new VaihdaKirjasinTyyppiActionListener(valitseFonttiVariLbl, valitseVariPanel, fontListScrollPane, valitseFonttiLbl, 
            metallikirjasinTyyppiLbl, metallikirjasinTyyppiCbox, metallikirjasinAlaTyyppiLbl, metallikirjasinAlaTyyppiCbox, metallikirjasinEsikatseluLbl, 
            metallikirjasinEsikatselu, vaihdaMetallikirjasinFontti, vaihdaKaiverrettukirjasinFontti, sukunimiTxt, vapaaTxt1, vapaaTxt2, vapaaTxt3, vapaaTxt4, etunimiTxt1, 
            etunimiTxt2, etunimiTxt3, etunimiTxt4, osTxt1, osTxt2, osTxt3, osTxt4, syntymaAikaTxt1, syntymaAikaTxt2, syntymaAikaTxt3, syntymaAikaTxt4, kuolinAikaTxt1, 
            kuolinAikaTxt2, kuolinAikaTxt3, kuolinAikaTxt4, esikatseluSukunimi, esikatseluHenkiloPanel));
        
        /* add control button listeners to tekstit tab */
        kirjasinKokoMinusButton.addActionListener(new TekstitActionListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, 
                metallikirjasinTyyppiCbox, metallikirjasinAlaTyyppiCbox, vapaaTeksti, etunimi, os, syntymaAika, hautakivi));
        kirjasinKokoPlusButton.addActionListener(new TekstitActionListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, 
                metallikirjasinTyyppiCbox, metallikirjasinAlaTyyppiCbox, vapaaTeksti, etunimi, os, syntymaAika, hautakivi));
        kirjasinLeveysMinusButton.addActionListener(new TekstitActionListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, 
                metallikirjasinTyyppiCbox, metallikirjasinAlaTyyppiCbox, vapaaTeksti, etunimi, os, syntymaAika, hautakivi));
        kirjasinLeveysPlusButton.addActionListener(new TekstitActionListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, 
                metallikirjasinTyyppiCbox, metallikirjasinAlaTyyppiCbox, vapaaTeksti, etunimi, os, syntymaAika, hautakivi));
        vasenButton.addActionListener(new TekstitActionListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, 
                metallikirjasinTyyppiCbox, metallikirjasinAlaTyyppiCbox, vapaaTeksti, etunimi, os, syntymaAika, hautakivi));
        keskitettyButton.addActionListener(new TekstitActionListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, 
                metallikirjasinTyyppiCbox, metallikirjasinAlaTyyppiCbox, vapaaTeksti, etunimi, os, syntymaAika, hautakivi));
        oikeaButton.addActionListener(new TekstitActionListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, 
                metallikirjasinTyyppiCbox, metallikirjasinAlaTyyppiCbox, vapaaTeksti, etunimi, os, syntymaAika, hautakivi));
        
        /* add eventlistener to vari labels */
        hopeaLbl.addMouseListener(new KirjasinVariMouseEventListener(esikatseluSukunimi.getKaiverrettukirjasinTxt(), esikatseluHenkiloPanel, 
                esikatseluHenkilo, esikatseluKoristeLabel, hautakivi));
        kultaLbl.addMouseListener(new KirjasinVariMouseEventListener(esikatseluSukunimi.getKaiverrettukirjasinTxt(), esikatseluHenkiloPanel, 
                esikatseluHenkilo, esikatseluKoristeLabel, hautakivi));
        mustaLbl.addMouseListener(new KirjasinVariMouseEventListener(esikatseluSukunimi.getKaiverrettukirjasinTxt(), esikatseluHenkiloPanel, 
                esikatseluHenkilo, esikatseluKoristeLabel, hautakivi));
        
        /* add actionlistener to metallikirjasinTyyppi combobox */
        metallikirjasinTyyppiCbox.addActionListener(new MetallikirjasinTyyppiActionListener(metallikirjasinAlaTyyppiCbox, metallikirjasinEsikatselu));
        
        /* add actionlistener to metallikirjasinAlaTyyppi combobox */
        metallikirjasinAlaTyyppiCbox.addActionListener(new MetallikirjasinAlaTyyppiActionListener(metallikirjasinTyyppiCbox, metallikirjasinEsikatselu));
        
        /* add actionlistener to metallikirjasin vaihda fontti button */
        vaihdaMetallikirjasinFontti.addActionListener(new VaihdaMetallikirjasinFonttiActionListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, 
                metallikirjasinTyyppiCbox, metallikirjasinAlaTyyppiCbox, hautakivi));
        
        /* add actionlistener to kaiverrettukirjasin vaihda fontti button */
        vaihdaKaiverrettukirjasinFontti.addActionListener(new VaihdaKaiverrettukirjasinFonttiActionListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, 
                fontList, hautakivi));
        
        /* add mouselistener to enkelit koristeet */
        for (EsikatseluJLabel koriste: ImageArrays.enkelitKirkasThumbnails) {
            koriste.addMouseListener(new KoristeMouseEventListener(esikatseluKoristeLabel, hautakivi));
        }
        
        /* add movement listeners to preview labels */
        esikatseluSukunimi.getKaiverrettukirjasinTxt().addMouseListener(new PreviewMovementListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo,
                esikatseluKoristeLabel, jTabbedPane1, fontList, vaihdaKaiverrettukirjasinFontti, vaihdaMetallikirjasinFontti, metallikirjasin));
        esikatseluSukunimi.getKaiverrettukirjasinTxt().addMouseMotionListener(new PreviewMovementListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo,
                esikatseluKoristeLabel, jTabbedPane1, fontList, vaihdaKaiverrettukirjasinFontti, vaihdaMetallikirjasinFontti, metallikirjasin));
        
        esikatseluSukunimi.getMetallikirjasinTxt().addMouseListener(new PreviewMovementListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo,
                esikatseluKoristeLabel, jTabbedPane1, fontList, vaihdaKaiverrettukirjasinFontti, vaihdaMetallikirjasinFontti, metallikirjasin));
        esikatseluSukunimi.getMetallikirjasinTxt().addMouseMotionListener(new PreviewMovementListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo,
                esikatseluKoristeLabel, jTabbedPane1, fontList, vaihdaKaiverrettukirjasinFontti, vaihdaMetallikirjasinFontti, metallikirjasin));
        
        for (j=0; j<Hautakivi.HENKILOMAARA; j++) {
            esikatseluHenkiloPanel[j].addMouseListener(new PreviewMovementListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, esikatseluKoristeLabel, 
                jTabbedPane1, fontList, vaihdaKaiverrettukirjasinFontti, vaihdaMetallikirjasinFontti, metallikirjasin));
            esikatseluHenkiloPanel[j].addMouseMotionListener(new PreviewMovementListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, esikatseluKoristeLabel, 
                jTabbedPane1, fontList, vaihdaKaiverrettukirjasinFontti, vaihdaMetallikirjasinFontti, metallikirjasin));
        }
        
        for (j=0; j<Hautakivi.KORISTEMAARA; j++) {
            esikatseluKoristeLabel[j].addMouseListener(new PreviewMovementListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, esikatseluKoristeLabel, 
                jTabbedPane1, fontList, vaihdaKaiverrettukirjasinFontti, vaihdaMetallikirjasinFontti, metallikirjasin));
            esikatseluKoristeLabel[j].addMouseMotionListener(new PreviewMovementListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluHenkilo, esikatseluKoristeLabel, 
                jTabbedPane1, fontList, vaihdaKaiverrettukirjasinFontti, vaihdaMetallikirjasinFontti, metallikirjasin));
        }
        
        /* add resetlistener to panels */
        esikatseluMuotoPanel.addMouseListener(new PreviewResetListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluKoristeLabel, 
                vaihdaKaiverrettukirjasinFontti, vaihdaMetallikirjasinFontti));
        esikatseluPanel.addMouseListener(new PreviewResetListener(esikatseluSukunimi, esikatseluHenkiloPanel, esikatseluKoristeLabel, 
                vaihdaKaiverrettukirjasinFontti, vaihdaMetallikirjasinFontti));
        
        /* add actionlistner to koristeTyyppi combobox */
        koristeTyyppiCbox.addActionListener(new KoristeTyyppiActionListener(koristeAlatyyppiCbox, koristeAlatyyppiCbox2, koristeAlatyyppiLbl, 
                koristeValintaPanel, koristeScrollPane, esikatseluKoristeLabel, hautakivi));
        
        /* add actionlistner to koristeAlaTyyppi comboboxs */
        koristeAlatyyppiCbox.addActionListener(new KoristeAlaTyyppiActionListener(koristeTyyppiCbox, koristeValintaPanel, koristeScrollPane, 
            esikatseluKoristeLabel, hautakivi));
        koristeAlatyyppiCbox2.addActionListener(new KoristeAlaTyyppiActionListener(koristeTyyppiCbox, koristeValintaPanel, koristeScrollPane, 
            esikatseluKoristeLabel, hautakivi));
        
        /* add controlbuttonlisteners to koriste tab */
        koristeKokoPlusButton.addActionListener(new KoristeActionListener(esikatseluKoristeLabel, esikatseluMuotoPanel, hautakivi));
        koristeKokoMinusButton.addActionListener(new KoristeActionListener(esikatseluKoristeLabel, esikatseluMuotoPanel, hautakivi));
        koristeKiertoPlusButton.addActionListener(new KoristeActionListener(esikatseluKoristeLabel, esikatseluMuotoPanel, hautakivi));
        koristeKiertoMinusButton.addActionListener(new KoristeActionListener(esikatseluKoristeLabel, esikatseluMuotoPanel, hautakivi));
        koristePinossaPlusButton.addActionListener(new KoristeActionListener(esikatseluKoristeLabel, esikatseluMuotoPanel, hautakivi));
        koristePinossaMinusButton.addActionListener(new KoristeActionListener(esikatseluKoristeLabel, esikatseluMuotoPanel, hautakivi));
        
        poistaKoristeButton.addActionListener(new PoistaKoristeActionListener(esikatseluKoristeLabel, esikatseluMuotoPanel, hautakivi));
        
        /* add actionlistener to print button */
        printButton.addActionListener(new TulostaActionListener(esikatseluPanel));
        
        /* add actionlistener to save button */
        saveButton.addActionListener(new SaveActionListener(esikatseluSukunimi, esikatseluHenkiloPanel, 
                esikatseluKoristeLabel, hautakivi));
        
        /* add actionlistener to image save button */
        imageSaveButton.addActionListener(new ImageSaveActionListener(esikatseluPanel));
        
        /* add actionlistener to open button */
        openButton.addActionListener(new OpenActionListener(esikatseluPanel, esikatseluMuotoPanel, pintaLbl, sahattu, hiottu, louhittu, 
                sukunimiTxt, vapaaTxt1, vapaaTxt2, vapaaTxt3, vapaaTxt4, etunimiTxt1, etunimiTxt2, etunimiTxt3, etunimiTxt4,  osTxt1, osTxt2, 
                osTxt3, osTxt4, syntymaAikaTxt1, syntymaAikaTxt2, syntymaAikaTxt3, syntymaAikaTxt4, kuolinAikaTxt1, kuolinAikaTxt2, kuolinAikaTxt3, 
                kuolinAikaTxt4, yhteysNimiTxt, yhteysPuhelinTxt, yhteysEmailTxt, esikatseluSukunimi, esikatseluHenkilo, esikatseluHenkiloPanel, 
                esikatseluKoristeLabel, esikatseluYhteystiedotLabel, esikatseluYhteystiedotNimi, esikatseluYhteystiedotPuhelin, esikatseluYhteystiedotEmail, 
                hautakivi));
        
        /* MUOTO JA KOKO */
        GroupLayout muotoPanelLayout = new GroupLayout(muotoValintaPanel);
        muotoValintaPanel.setLayout(muotoPanelLayout);
        muotoPanelLayout.setAutoCreateGaps(true);
        muotoPanelLayout.setAutoCreateContainerGaps(true);
        
        GroupLayout.Group groupMuotoH = muotoPanelLayout.createSequentialGroup();
        groupMuotoH = groupMuotoH.addGroup(muotoPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING));
        groupMuotoH.addGap(5);
        for (JLabel image : muotoEsikatseluLabels) {
            groupMuotoH.addComponent(image);
            groupMuotoH.addGap(10);
        }
        muotoPanelLayout.setHorizontalGroup(groupMuotoH);
        
        GroupLayout.Group groupMuotoV = muotoPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING);
        groupMuotoV = groupMuotoV.addGroup(muotoPanelLayout.createSequentialGroup());
        
        for (JLabel image : muotoEsikatseluLabels) {
            groupMuotoV.addComponent(image);
        }
        muotoPanelLayout.setVerticalGroup(groupMuotoV);

        muotoScrollPane.setViewportView(muotoValintaPanel);
        
        
        GroupLayout muotoLayout = new GroupLayout(muoto);
        muoto.setLayout(muotoLayout);
        muotoLayout.setHorizontalGroup(
            muotoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(muotoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(muotoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(muotoLayout.createSequentialGroup()
                            .addComponent(leveysLbl)
                            .addGap(6, 6, 6)   
                            .addComponent(kivenLeveysTxt, 60, 60, 60)
                            .addGap(4, 4, 4)
                            .addComponent(cmLeveysLbl)
                            .addGap(18, 18, 18)
                            .addComponent(korkeusLbl)
                            .addGap(6, 6, 6)
                            .addComponent(kivenKorkeusTxt, 60, 60, 60)
                            .addGap(4, 4, 4)
                            .addComponent(cmKorkeusLbl)
                            .addGap(18, 18 ,18)
                            .addComponent(vaihdaKokoButton)
                            .addGap(40, 40, 40)
                            .addComponent(pintaLbl)
                            .addGap(10, 10, 10)
                            .addComponent(sahattu)
                            .addGap(10, 10, 10)
                            .addComponent(hiottu)
                            .addGap(10, 10, 10)
                            .addComponent(louhittu))
                            .addGroup(muotoLayout.createSequentialGroup()
                                .addComponent(valitseMuotoLbl)
                                .addGap(18, 18, 18)
                                .addComponent(muotoScrollPane, 980, 980, 980))))
        );
        muotoLayout.setVerticalGroup(
            muotoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(muotoLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(muotoLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(valitseMuotoLbl)
                        .addComponent(muotoScrollPane, 140, 140, 140))
                        .addGap(30, 30, 30)
                        .addGroup(muotoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(leveysLbl)
                            .addComponent(kivenLeveysTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addGroup(muotoLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(korkeusLbl)
                                .addComponent(kivenKorkeusTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addComponent(cmKorkeusLbl)
                                .addComponent(vaihdaKokoButton)
                                .addComponent(pintaLbl)
                                .addComponent(sahattu)
                                .addComponent(hiottu)    
                                .addComponent(louhittu))
                        .addComponent(cmLeveysLbl)))
                        
                        
        );
                    
        jTabbedPane1.addTab("Muoto ja koko", muoto);

        /* VÄRI */
        GroupLayout variPanelLayout = new GroupLayout(kivenVariValintaPanel);
        kivenVariValintaPanel.setLayout(variPanelLayout);
        variPanelLayout.setAutoCreateGaps(true);
        variPanelLayout.setAutoCreateContainerGaps(true);
        
        GroupLayout.Group groupVariH = variPanelLayout.createSequentialGroup();
        groupVariH = groupVariH.addGroup(variPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING));
        groupVariH.addGap(5);
        for (JLabel image : kivenVariEsikatseluLabels) {
            groupVariH.addComponent(image);
            groupVariH.addGap(15);
        }
        variPanelLayout.setHorizontalGroup(groupVariH);
        
        GroupLayout.Group groupVariV = variPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING);
        groupVariV = groupVariV.addGroup(variPanelLayout.createSequentialGroup());
        
        for (JLabel image : kivenVariEsikatseluLabels) {
            groupVariV.addComponent(image);
        }
        variPanelLayout.setVerticalGroup(groupVariV);

        kivenVariScrollPane.setViewportView(kivenVariValintaPanel);
        
        
        GroupLayout variLayout = new GroupLayout(kivenVari);
        kivenVari.setLayout(variLayout);
        variLayout.setHorizontalGroup(
            variLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(variLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(valitseKivenVariLbl)
                        .addGap(18, 18, 18)
                        .addComponent(kivenVariScrollPane, 990, 990, 990))
        );
        variLayout.setVerticalGroup(
            variLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(variLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(variLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(valitseKivenVariLbl)
                        .addComponent(kivenVariScrollPane, 160, 160, 160)))
        );
                    
        jTabbedPane1.addTab("Väri", kivenVari);
        
        
        /* TEKSTIT */
        GroupLayout valitseVariPanelLayout = new GroupLayout(valitseVariPanel);
        valitseVariPanel.setLayout(valitseVariPanelLayout);
        valitseVariPanelLayout.setHorizontalGroup(
            valitseVariPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(valitseVariPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(kultaLbl, 30, 30, 30)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mustaLbl, 30, 30, 30)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hopeaLbl, 30, 30, 30)
               
        ));
        valitseVariPanelLayout.setVerticalGroup(
            valitseVariPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(valitseVariPanelLayout.createSequentialGroup()
                .addGroup(valitseVariPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                    .addComponent(mustaLbl, GroupLayout.Alignment.LEADING, 30, 30, 30)
                    .addComponent(kultaLbl, GroupLayout.Alignment.LEADING, 30, 30, 30)
                    .addComponent(hopeaLbl, GroupLayout.Alignment.LEADING, 30, 30, 30))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
 
        GroupLayout tekstitLayout = new GroupLayout(tekstitPanel);
        tekstitPanel.setLayout(tekstitLayout);
        tekstitLayout.setHorizontalGroup(
            tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(tekstitLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addComponent(vapaaTekstiLbl)
                        .addGap(10, 10, 10)
                        .addComponent(vapaaTeksti, 20, 20, 20))
                    .addComponent(vapaaTxt1, 80, 80, 80)
                    .addComponent(vapaaTxt2, 80, 80, 80)
                    .addComponent(vapaaTxt3, 80, 80, 80)
                    .addComponent(vapaaTxt4, 80, 80, 80))
                .addGap(18, 18, 18)
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addComponent(etunimiLbl)
                        .addGap(10, 10, 10)
                        .addComponent(etunimi, 20, 20, 20))
                    .addComponent(etunimiTxt1, 100, 100, 100)
                    .addComponent(etunimiTxt2, 100, 100, 100)
                    .addComponent(etunimiTxt3, 100, 100, 100)
                    .addComponent(etunimiTxt4, 100, 100, 100))
                .addGap(18, 18, 18)
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addComponent(osLbl)
                        .addGap(10, 10, 10)
                        .addComponent(os, 20, 20, 20))
                    .addComponent(osTxt1, 160, 160, 160)
                    .addComponent(osTxt2, 160, 160, 160)
                    .addComponent(osTxt3, 160, 160, 160)
                    .addComponent(osTxt4, 160, 160, 160))
                .addGap(18, 18, 18)
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addComponent(syntymaAikaLbl)
                        .addGap(10, 10, 10)
                        .addComponent(syntymaAika, 20, 20, 20))
                    .addComponent(syntymaAikaTxt1, 80,80, 80)
                    .addComponent(syntymaAikaTxt2, 80,80, 80)
                    .addComponent(syntymaAikaTxt3, 80,80, 80)
                    .addComponent(syntymaAikaTxt4, 80,80, 80))
                .addGap(18, 18, 18)
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(kuolinAikaLbl)
                    .addComponent(kuolinAikaTxt1, 80,80, 80)
                    .addComponent(kuolinAikaTxt2, 80,80, 80)
                    .addComponent(kuolinAikaTxt3, 80,80, 80)
                    .addComponent(kuolinAikaTxt4, 80,80, 80))
                .addGap(20, 20, 20)
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(kirjasinLeveysLbl)
                    .addComponent(kokoLbl, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
                    .addComponent(tasausLbl)
                    .addComponent(valitseFonttiVariLbl))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addComponent(kirjasinKokoPlusButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kirjasinKokoMinusButton))
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addComponent(vasenButton, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keskitettyButton, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(oikeaButton, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addComponent(kirjasinLeveysPlusButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kirjasinLeveysMinusButton))
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addComponent(valitseVariPanel, 140, 140, 140)))
                .addGap(20, 20, 20)
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(fontListScrollPane, 160, 160, 160)
                    .addComponent(vaihdaKaiverrettukirjasinFontti)
                    .addComponent(metallikirjasinTyyppiLbl)
                    .addComponent(metallikirjasinAlaTyyppiCbox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(metallikirjasinAlaTyyppiLbl)
                    .addComponent(metallikirjasinTyyppiCbox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(valitseFonttiLbl, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                    )
                .addGap(25, 25, 25)
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)   
                    .addComponent(metallikirjasinEsikatseluLbl)
                    .addComponent(metallikirjasinEsikatselu)
                    .addComponent(vaihdaMetallikirjasinFontti)))
            .addGroup(tekstitLayout.createSequentialGroup()
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(sukunimiLbl)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sukunimiTxt, 160, 160, 160))
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addGap(492, 492, 492)
                        .addComponent(kaiverrettuna)
                        .addGap(18, 18, 18)
                        .addComponent(metallikirjasin)))
                        .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    )
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tekstitLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {keskitettyButton, oikeaButton, vasenButton});
        tekstitLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {vapaaTxt1, vapaaTxt2, vapaaTxt3, vapaaTxt4});
        tekstitLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {etunimiTxt1, etunimiTxt2, etunimiTxt3, etunimiTxt4});
        tekstitLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {osTxt1, osTxt2, osTxt3, osTxt4});
        tekstitLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {syntymaAikaTxt1, syntymaAikaTxt2, syntymaAikaTxt3, syntymaAikaTxt4});
        tekstitLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {kuolinAikaTxt1, kuolinAikaTxt2, kuolinAikaTxt3, kuolinAikaTxt4});

        tekstitLayout.setVerticalGroup(
            tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(tekstitLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(kaiverrettuna)
                    .addComponent(metallikirjasin)
                    .addComponent(valitseFonttiLbl)
                    .addComponent(sukunimiLbl)
                    .addComponent(sukunimiTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(kirjasinLeveysLbl)
                            .addComponent(kirjasinLeveysPlusButton)
                            .addComponent(kirjasinLeveysMinusButton))
                        .addGap(21, 21, 21)
                        .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(kokoLbl)
                            .addComponent(kirjasinKokoPlusButton)
                            .addComponent(kirjasinKokoMinusButton))
                        .addGap(15, 15, 15)
                        .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(tasausLbl)
                            .addComponent(vasenButton)
                            .addComponent(keskitettyButton)
                            .addComponent(oikeaButton))
                        .addGap(10, 10, 10)
                        .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(valitseFonttiVariLbl)
                            .addComponent(valitseVariPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addComponent(fontListScrollPane, 150, 150, 150)
                        .addGap(5, 5, 5)
                        .addComponent(vaihdaKaiverrettukirjasinFontti)
                        .addComponent(metallikirjasinTyyppiLbl)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(metallikirjasinTyyppiCbox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(metallikirjasinAlaTyyppiLbl)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(metallikirjasinAlaTyyppiCbox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addComponent(metallikirjasinEsikatseluLbl)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(metallikirjasinEsikatselu)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(vaihdaMetallikirjasinFontti))
                    .addGroup(tekstitLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(vapaaTekstiLbl)
                            .addComponent(vapaaTeksti, 15, 15, 15)
                            .addComponent(etunimiLbl)
                            .addComponent(etunimi, 15, 15, 15)
                            .addComponent(osLbl)
                            .addComponent(os, 15, 15, 15)
                            .addComponent(syntymaAikaLbl)
                            .addComponent(syntymaAika, 15, 15, 15)
                            .addComponent(kuolinAikaLbl))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(vapaaTxt1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(etunimiTxt1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(osTxt1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(syntymaAikaTxt1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(kuolinAikaTxt1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(vapaaTxt2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(etunimiTxt2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(osTxt2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(syntymaAikaTxt2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(kuolinAikaTxt2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(vapaaTxt3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(etunimiTxt3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(osTxt3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(syntymaAikaTxt3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(kuolinAikaTxt3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tekstitLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(vapaaTxt4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(etunimiTxt4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(osTxt4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(syntymaAikaTxt4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(kuolinAikaTxt4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        ))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        tekstitLayout.linkSize(SwingConstants.VERTICAL, new Component[] {keskitettyButton, oikeaButton, vasenButton});

        jTabbedPane1.addTab("Tekstit", tekstitPanel);

        
        /* KORISTEET */ 
        koristeValintaPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 20, 10));
        
        for (EsikatseluJLabel koriste: ImageArrays.enkelitKirkasThumbnails) {
            koristeValintaPanel.add(koriste);
        }
        
        koristeScrollPane.setViewportView(koristeValintaPanel);

        GroupLayout koristeetLayout = new GroupLayout(koristeet);
        koristeet.setLayout(koristeetLayout);
        koristeetLayout.setHorizontalGroup(
            koristeetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(koristeetLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(koristeTyyppiLbl)
                    .addComponent(koristeAlatyyppiCbox, GroupLayout.PREFERRED_SIZE, 119, GroupLayout.PREFERRED_SIZE)
                    .addComponent(koristeAlatyyppiCbox2, 170, 170, 170)
                    .addComponent(koristeAlatyyppiLbl)
                    .addComponent(koristeTyyppiCbox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(valitseKoristeLbl)
                    .addGroup(koristeetLayout.createSequentialGroup()
                        .addComponent(koristeScrollPane, 600, 600, 600)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(koristeKokoLbl)
                            .addComponent(koristeKiertoLbl)
                            .addComponent(koristePinossaLbl)
                            .addComponent(poistaKoristeButton))
                        .addGap(7, 7, 7)
                        .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(koristeKokoPlusButton)
                            .addComponent(koristeKiertoPlusButton)
                            .addComponent(koristePinossaPlusButton))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(koristeKokoMinusButton)
                            .addComponent(koristeKiertoMinusButton)
                            .addComponent(koristePinossaMinusButton))))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        
        
        koristeetLayout.setVerticalGroup(
            koristeetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(koristeetLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(valitseKoristeLbl)
                .addGap(5, 5, 5)
                .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(koristeetLayout.createSequentialGroup()
                        .addComponent(koristeTyyppiLbl)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(koristeTyyppiCbox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(koristeAlatyyppiLbl)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(koristeAlatyyppiCbox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(koristeAlatyyppiCbox2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(koristeetLayout.createSequentialGroup()
                            .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(koristeKokoLbl)
                                .addComponent(koristeKokoPlusButton)
                                .addComponent(koristeKokoMinusButton))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(koristeKiertoLbl)
                                .addComponent(koristeKiertoPlusButton)
                                .addComponent(koristeKiertoMinusButton))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(koristePinossaLbl)
                                .addComponent(koristePinossaPlusButton)
                                .addComponent(koristePinossaMinusButton))
                                .addGap(15, 15, 15)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(koristeetLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(poistaKoristeButton)))
                        .addComponent(koristeScrollPane, 200, 200, 200)))
                .addContainerGap(270, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Koristeet", koristeet);

        
        /* YHTEYSTIEDOT */
        GroupLayout yhteystiedotLayout = new GroupLayout(yhteystiedotPanel);
        yhteystiedotPanel.setLayout(yhteystiedotLayout);
        yhteystiedotLayout.setHorizontalGroup(
            yhteystiedotLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(yhteystiedotLayout.createSequentialGroup()
                .addGroup(yhteystiedotLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(yhteystiedotLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(yhteystiedotLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(yhteysNimiLbl)
                            .addComponent(yhteysPuhelinLbl)
                            .addComponent(yhteysEmailLbl))
                        .addGap(45, 45, 45)
                        .addGroup(yhteystiedotLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(yhteysPuhelinTxt, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                            .addComponent(yhteysEmailTxt, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                            .addComponent(yhteysNimiTxt, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(yhteystiedotLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(yhteysOtsikkoLbl)))
                .addContainerGap(704, Short.MAX_VALUE))
        );

        yhteystiedotLayout.linkSize(SwingConstants.HORIZONTAL, new Component[] {yhteysNimiTxt, yhteysPuhelinTxt, yhteysEmailTxt});

        yhteystiedotLayout.setVerticalGroup(
            yhteystiedotLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(yhteystiedotLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(yhteysOtsikkoLbl)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(yhteystiedotLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(yhteysNimiTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(yhteysNimiLbl))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(yhteystiedotLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(yhteysPuhelinTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(yhteysPuhelinLbl))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(yhteystiedotLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(yhteysEmailTxt, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(yhteysEmailLbl))
                .addContainerGap(115, Short.MAX_VALUE))
        );

        yhteystiedotLayout.linkSize(SwingConstants.VERTICAL, new Component[] {yhteysNimiTxt, yhteysPuhelinTxt, yhteysEmailTxt});

        jTabbedPane1.addTab("Yhteystiedot", yhteystiedotPanel);
        
        /* TAUSTA */
        GroupLayout taustaPanelLayout = new GroupLayout(taustaValintaPanel);
        taustaValintaPanel.setLayout(taustaPanelLayout);
        taustaPanelLayout.setAutoCreateGaps(true);
        taustaPanelLayout.setAutoCreateContainerGaps(true);
        
        GroupLayout.Group groupTaustaH = taustaPanelLayout.createSequentialGroup();
        groupTaustaH = groupTaustaH.addGroup(taustaPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING));
        groupTaustaH.addGap(5);
        for (JLabel image : taustaEsikatseluLabels) {
            groupTaustaH.addComponent(image);
            groupTaustaH.addGap(15);
        }
        taustaPanelLayout.setHorizontalGroup(groupTaustaH);
        
        GroupLayout.Group groupTaustaV = taustaPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING);
        groupTaustaV = groupTaustaV.addGroup(taustaPanelLayout.createSequentialGroup());
        
        for (JLabel image : taustaEsikatseluLabels) {
            groupTaustaV.addComponent(image);
        }
        taustaPanelLayout.setVerticalGroup(groupTaustaV);

        taustaScrollPane.setViewportView(taustaValintaPanel);
        
        
        GroupLayout taustaLayout = new GroupLayout(tausta);
        tausta.setLayout(taustaLayout);
        taustaLayout.setHorizontalGroup(
            taustaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(taustaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(valitseTaustaLbl)
                        .addGap(18, 18, 18)
                        .addComponent(taustaScrollPane, 990, 990, 990))
        );
        taustaLayout.setVerticalGroup(
            taustaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(taustaLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(taustaLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(valitseTaustaLbl)
                        .addComponent(taustaScrollPane, 160, 160, 160)))
        );
                    
        jTabbedPane1.addTab("Tausta", tausta);
        
        esikatseluPanel.setLayout(null);
        esikatseluPanel.add(esikatseluMuotoPanel);
        esikatseluPanel.add(esikatseluYhteystiedotPanel);
        
        esikatseluYhteystiedotPanel.setLayout(new BoxLayout(esikatseluYhteystiedotPanel, BoxLayout.Y_AXIS));
        esikatseluYhteystiedotPanel.setOpaque(false);
        esikatseluYhteystiedotPanel.add(esikatseluYhteystiedotLabel);
        esikatseluYhteystiedotPanel.add(esikatseluYhteystiedotNimi);
        esikatseluYhteystiedotPanel.add(esikatseluYhteystiedotPuhelin);
        esikatseluYhteystiedotPanel.add(esikatseluYhteystiedotEmail);
        
        esikatseluYhteystiedotPanel.setSize(esikatseluYhteystiedotPanel.getPreferredSize());
        esikatseluYhteystiedotPanel.setLocation(20, 30);
        
        Dimension size = esikatseluSukunimi.getKaiverrettukirjasinTxt().getPreferredSize();
        int kivenLeveys = hautakivi.getKivenLeveys()*Hautakivi.SCALINGFACTORY;
        int kivenKorkeus = hautakivi.getKivenKorkeus()*Hautakivi.SCALINGFACTORY;
        
        esikatseluMuotoPanel.setOpaque(false);      
        esikatseluMuotoPanel.setLayout(null);
        
        esikatseluMuotoPanel.add(esikatseluSukunimi.getKaiverrettukirjasinTxt(), new Integer(2), 0);
        esikatseluSukunimi.getKaiverrettukirjasinTxt().setBounds(1120/2-size.width/2, 
                560-kivenKorkeus-20, size.width+5, size.height+5);
        esikatseluSukunimi.getMetallikirjasinTxt().setVisible(false);
        esikatseluMuotoPanel.add(esikatseluSukunimi.getMetallikirjasinTxt(), new Integer(2), 0);
        
        for (j=0; j<Hautakivi.HENKILOMAARA; j++) {
            size = esikatseluHenkiloPanel[j].getPreferredSize();
            esikatseluMuotoPanel.add(esikatseluHenkiloPanel[j], new Integer(1), j);
            esikatseluHenkiloPanel[j].setBounds(1120/3+(j%2)*180, 560-kivenKorkeus+40+(int)(j/2)*90, 
                    size.width+5, size.height+5);
        }
        
        for (j=0; j<Hautakivi.KORISTEMAARA; j++) {
            size = esikatseluKoristeLabel[j].getPreferredSize();
            esikatseluMuotoPanel.add(esikatseluKoristeLabel[j], new Integer(0), j);
            hautakivi.getKoriste(j).setKoristePinossa(j); // update the object
            esikatseluKoristeLabel[j].setBounds(1120/3, 560-kivenKorkeus+40+(int)(j/2)*60, size.width+5, size.height+5);
        }
        
        esikatseluMuotoPanel.setSize(esikatseluMuotoPanel.getImage().getWidth(this), esikatseluMuotoPanel.getImage().getHeight(this));
        esikatseluMuotoPanel.setLocation(0, 0);
        
        openButton.setActionCommand("open");
        saveButton.setActionCommand("save");
        imageSaveButton.setActionCommand("save_image");
        
        leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));
        leftPanel.add(copyLbl);
        leftPanel.add(kayttoOikeus);
        leftPanel.add(Box.createRigidArea(new Dimension(50, 10)));
        leftPanel.add(openButton);
        leftPanel.add(Box.createRigidArea(new Dimension(50, 10)));
        leftPanel.add(saveButton);
        leftPanel.add(Box.createRigidArea(new Dimension(50, 10)));
        leftPanel.add(imageSaveButton);
        leftPanel.add(Box.createRigidArea(new Dimension(50, 10)));
        leftPanel.add(printButton);
        
        int width = saveButton.getPreferredSize().width;
        
        openButton.setPreferredSize(new Dimension(width, openButton.getPreferredSize().height));
        openButton.setMinimumSize(new Dimension(width, openButton.getPreferredSize().height));
        openButton.setMaximumSize(new Dimension(width, openButton.getPreferredSize().height));
        
        saveButton.setPreferredSize(new Dimension(width, saveButton.getPreferredSize().height));
        saveButton.setMinimumSize(new Dimension(width, saveButton.getPreferredSize().height));
        saveButton.setMaximumSize(new Dimension(width, saveButton.getPreferredSize().height));
        
        imageSaveButton.setPreferredSize(new Dimension(width, imageSaveButton.getPreferredSize().height));
        imageSaveButton.setMinimumSize(new Dimension(width, imageSaveButton.getPreferredSize().height));
        imageSaveButton.setMaximumSize(new Dimension(width, imageSaveButton.getPreferredSize().height));
        
        printButton.setPreferredSize(new Dimension(width, printButton.getPreferredSize().height));
        printButton.setMinimumSize(new Dimension(width, printButton.getPreferredSize().height));
        printButton.setMaximumSize(new Dimension(width, printButton.getPreferredSize().height));
        
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(leftPanel, 120, 120, 120)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(esikatseluPanel, 1120, 1120, 1120)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jTabbedPane1, 1120, 1120, 1120))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10)
                        .addComponent(leftPanel))
                    .addComponent(jTabbedPane1, 285, 285, 285))
                    .addComponent(esikatseluPanel, 560, 560, 560))
        );
        
        pack();
    }// </editor-fold>                           
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        /* a hack from http://stackoverflow.com/questions/13575224/comparison-method-violates-its-general-contract-timsort-and-gridlayout */
        System.setProperty("java.util.Arrays.useLegacyMergeSort", "true");
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(HautakiviohjelmaUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new HautakiviohjelmaUI().setVisible(true);
        });
    }
    public static BufferedImage[] loadImages(String path) {
        ArrayList<String> fileNames = new ArrayList<>();
        File[] files = new File(path).listFiles();
        
        for (File file : files) {
            if (file.isFile() && (file.getName().endsWith(".png") || file.getName().endsWith(".jpg") || file.getName().endsWith(".jpeg"))) {
                fileNames.add(path + file.getName());
            }
        }
      
        int i = 0;
        BufferedImage[] buffImages = new BufferedImage[fileNames.size()];
        
        ListIterator<String> fileNameIterator = fileNames.listIterator();
        while (fileNameIterator.hasNext()) {
            try {
                buffImages[i++] = ImageIO.read(new File(fileNameIterator.next()));
            } catch (IOException ex) {
                System.out.println(fileNameIterator.next());
                Logger.getLogger(HautakiviohjelmaUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return buffImages;
    }
    
    public static FontImage[] loadFontImages(String path) {
        ArrayList<String> fileNames = new ArrayList<>();
        File[] files = new File(path).listFiles();
        
        for (File file : files) {
            if (file.isFile() && (file.getName().endsWith(".png") || file.getName().endsWith(".jpg") || file.getName().endsWith(".jpeg"))) {
                fileNames.add(path + file.getName());
            }
        }
      
        int i = 0;
        FontImage[] fontImages = new FontImage[fileNames.size()];
        
        BufferedImage buffImage;
        String description;
        
        ListIterator<String> fileNameIterator = fileNames.listIterator();
        while (fileNameIterator.hasNext()) {
            try {
                description = fileNameIterator.next();
                buffImage = ImageIO.read(new File(description));
                fontImages[i++] = new FontImage(buffImage, description);
            } catch (IOException ex) {
                System.out.println(fileNameIterator.next());
                Logger.getLogger(HautakiviohjelmaUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return fontImages;
    }
    
    public static DescriptionImage[] loadDescriptionImages(String path) {
        ArrayList<String> fileNames = new ArrayList<>();
        File[] files = new File(path).listFiles();
        
        for (File file : files) {
            if (file.isFile() && (file.getName().endsWith(".png") || file.getName().endsWith(".jpg") || file.getName().endsWith(".jpeg"))) {
                fileNames.add(path + file.getName());
            }
        }
      
        int i = 0;
        DescriptionImage[] descImages = new DescriptionImage[fileNames.size()];
        
        BufferedImage buffImage;
        String description;
        
        ListIterator<String> fileNameIterator = fileNames.listIterator();
        while (fileNameIterator.hasNext()) {
            try {
                description = fileNameIterator.next();
                buffImage = ImageIO.read(new File(description));
                descImages[i++] = new DescriptionImage(buffImage, description);
            } catch (IOException ex) {
                System.out.println(fileNameIterator.next());
                Logger.getLogger(HautakiviohjelmaUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return descImages;
    }
    
    public static Image[] scaleImages(BufferedImage[] images, float scaleRatio) {
        BufferedImage[] scaledImages = new BufferedImage[images.length];
        int width, height;
        Graphics2D g2d;
        for (int i=0; i<images.length; i++) {
            width = (int)(images[i].getWidth()*scaleRatio);
            height = (int)(images[i].getHeight()*scaleRatio);
            
            scaledImages[i] = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            g2d = scaledImages[i].createGraphics();
            g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g2d.drawImage(images[i], 0, 0, width, height, null);
            g2d.dispose();
        }
        return scaledImages;
    }
    
    public static DescriptionImage[] scaleImages(DescriptionImage[] images, float scaleRatio) {
        DescriptionImage[] scaledImages = new DescriptionImage[images.length];
        int width, height;
        Graphics2D g2d;
        for (int i=0; i<images.length; i++) {
            width = (int)(images[i].getImage().getWidth()*scaleRatio);
            height = (int)(images[i].getImage().getHeight()*scaleRatio);
            scaledImages[i] = new DescriptionImage(
                    new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB), images[i].getDescription());
            g2d = scaledImages[i].getImage().createGraphics();
            g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g2d.drawImage(images[i].getImage(), 0, 0, width, height, null);
            g2d.dispose();     
        }
        return scaledImages;
    }
    
    public static Image[] scaleImagesXY(BufferedImage[] images, int width, int height) {
        BufferedImage[] scaledImages = new BufferedImage[images.length];
        Graphics2D g2d;
        for (int i=0; i<images.length; i++) {
            scaledImages[i] = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
            g2d = scaledImages[i].createGraphics();
            g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g2d.drawImage(images[i], 0, 0, width, height, null);
            g2d.dispose();
        }
        return scaledImages;
    }
    
    public static BufferedImage scaleImage(BufferedImage image, int width, int height, double scaleRatio) {
        BufferedImage translatedImage;
        int scaledWidth, scaledHeight;
        Graphics2D g2d;
        
        scaledWidth = (int)(width*scaleRatio);
        scaledHeight = (int)(height*scaleRatio);
        
        translatedImage = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_ARGB);
        g2d = translatedImage.createGraphics();
    
            g2d.drawImage(image, 0, 0, scaledWidth, scaledHeight, null);
            g2d.dispose();
            return translatedImage;
    }
    
    public static BufferedImage scaleImage(DescriptionImage image, int width, int height, double scaleRatio) {
        BufferedImage translatedImage;
        int scaledWidth, scaledHeight;
        Graphics2D g2d;
        
        scaledWidth = (int)(width*scaleRatio);
        scaledHeight = (int)(height*scaleRatio);
        
        translatedImage = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_ARGB);
        g2d = translatedImage.createGraphics();
    
            g2d.drawImage(image.getImage(), 0, 0, scaledWidth, scaledHeight, null);
            g2d.dispose();
            return translatedImage;
    }
    
    public static BufferedImage scaleImageXY(BufferedImage image, int width, int height) {
        BufferedImage translatedImage;
        Graphics2D g2d;
        
        translatedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        g2d = translatedImage.createGraphics();
    
            g2d.drawImage(image, 0, 0, width, height, null);
            g2d.dispose();
            return translatedImage;
    }
    
    public static BufferedImage rotateImage(BufferedImage image, double rotationAngle) {
        BufferedImage translatedImage;
        int scaledWidth, scaledHeight, width, height;
        double posX, posY;
        Graphics2D g2d;
        AffineTransform at;
        
        width = image.getWidth(null);
        height = image.getHeight(null);
       
        scaledWidth = (int)(width*StrictMath.abs(StrictMath.cos(rotationAngle)) + height*StrictMath.abs(StrictMath.sin(rotationAngle)));
        scaledHeight = (int)(height*StrictMath.abs(StrictMath.cos(rotationAngle)) + width*StrictMath.abs(StrictMath.sin(rotationAngle)));
        translatedImage = new BufferedImage(scaledWidth, scaledHeight, BufferedImage.TYPE_INT_ARGB);
        g2d = translatedImage.createGraphics();
        
        at = AffineTransform.getRotateInstance(rotationAngle, scaledWidth/2, scaledHeight/2);
        posX = (scaledWidth-width)/2;
        posY = (scaledHeight-height)/2;
        at.translate(posX, posY);
        g2d.drawRenderedImage(image, at);
        g2d.dispose();
        return translatedImage;
    }
    
    public static EsikatseluJLabel[] createThumbnailImages(Image[] images, String imageType, boolean borderFlag) {
        EsikatseluJLabel[] thumbnailImages = new EsikatseluJLabel[images.length];
        Border labelBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
        
        for (int i=0; i<images.length; i++) {
            thumbnailImages[i] = new EsikatseluJLabel(new ImageIcon(images[i]), imageType, i);
            if (borderFlag) {
                /* set the border for the image */
                thumbnailImages[i].setBorder(labelBorder);
            }            
        }
        return thumbnailImages;
    }
    
    public static EsikatseluJLabel[] createThumbnailImages(DescriptionImage[] images) {
        EsikatseluJLabel[] thumbnailImages = new EsikatseluJLabel[images.length];
        for (int i=0; i<images.length; i++) {
            thumbnailImages[i] = new EsikatseluJLabel(new ImageIcon(images[i].getImage()), 
                    images[i].getDescription(), i);
            thumbnailImages[i].setText("Muoto"+i);
            thumbnailImages[i].setVerticalTextPosition(JLabel.BOTTOM);
            thumbnailImages[i].setHorizontalTextPosition(JLabel.CENTER);
        }
        return thumbnailImages;
    }
    
    public static EsikatseluJLabel[] createThumbnailImages(DescriptionImage[] images, 
        String imageType, boolean borderFlag) {
        EsikatseluJLabel[] thumbnailImages = new EsikatseluJLabel[images.length];
        Border labelBorder = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);
        
        for (int i=0; i<images.length; i++) {
            thumbnailImages[i] = new EsikatseluJLabel(new ImageIcon(images[i].getImage()), 
                    imageType, images[i].getDescription(), i);
            if (borderFlag) {
                /* set the border for the image */
                thumbnailImages[i].setBorder(labelBorder);
            }            
        }
        return thumbnailImages;
    }

    // Variables declaration - do not modify                     
    private JButton avaa;
    private ButtonGroup buttonGroupKirjasinTyyppi;
    private ButtonGroup buttonGroupPinta;
    private JLabel cmKorkeusLbl;
    private JLabel cmLeveysLbl;
    private JLabel copyLbl;
    private EsikatseluHenkilo[] esikatseluHenkilo;
    private EsikatseluHenkiloPanel[] esikatseluHenkiloPanel;
    private EsikatseluJLabel[] esikatseluKoristeLabel;
    private MuotoJPanel esikatseluMuotoPanel;
    private BackgroundPanel esikatseluPanel;
    private EsikatseluSukunimi esikatseluSukunimi;
    private EsikatseluJLabel esikatseluYhteystiedotEmail;
    private EsikatseluJLabel esikatseluYhteystiedotLabel;
    private EsikatseluJLabel esikatseluYhteystiedotNimi;
    private JPanel esikatseluYhteystiedotPanel;
    private EsikatseluJLabel esikatseluYhteystiedotPuhelin;
    private Checkbox etunimi;
    private JLabel etunimiLbl;
    private JTextField etunimiTxt1;
    private JTextField etunimiTxt2;
    private JTextField etunimiTxt3;
    private JTextField etunimiTxt4;
    private JList fontList;
    private DefaultListModel fontListModel;
    private JScrollPane fontListScrollPane;
    private JRadioButton hiottu;
    private EsikatseluJLabel hopeaLbl;
    private JButton imageSaveButton;
    private JTabbedPane jTabbedPane1;
    private JRadioButton kaiverrettuna;
    private JLabel kayttoOikeus;
    private ControlButton keskitettyButton;
    private ControlButton kirjasinKokoMinusButton;
    private ControlButton kirjasinKokoPlusButton;
    private JLabel kirjasinLeveysLbl;
    private ControlButton kirjasinLeveysMinusButton;
    private ControlButton kirjasinLeveysPlusButton;
    private JTextField kivenKorkeusTxt;
    private JTextField kivenLeveysTxt;
    private JPanel kivenVari;
    private JScrollPane kivenVariScrollPane;
    private JPanel kivenVariValintaPanel;
    private JLabel kokoLbl;
    private JComboBox koristeAlatyyppiCbox;
    private JComboBox koristeAlatyyppiCbox2;
    private JLabel koristeAlatyyppiLbl;
    private JPanel koristeet;
    private JLabel koristeKiertoLbl;
    private ControlButton koristeKiertoMinusButton;
    private ControlButton koristeKiertoPlusButton;
    private JLabel koristeKokoLbl;
    private ControlButton koristeKokoMinusButton;
    private ControlButton koristeKokoPlusButton;
    private JLabel koristePinossaLbl;
    private ControlButton koristePinossaMinusButton;
    private ControlButton koristePinossaPlusButton;
    private JScrollPane koristeScrollPane;
    private JComboBox koristeTyyppiCbox;
    private JLabel koristeTyyppiLbl;
    private JPanel koristeValintaPanel;
    private JLabel korkeusLbl;
    private EsikatseluJLabel kultaLbl;
    private JLabel kuolinAikaLbl;
    private JTextField kuolinAikaTxt1;
    private JTextField kuolinAikaTxt2;
    private JTextField kuolinAikaTxt3;
    private JTextField kuolinAikaTxt4;
    private JPanel leftPanel;
    private JLabel leveysLbl;
    private JRadioButton louhittu;
    private JRadioButton metallikirjasin;
    private JComboBox metallikirjasinAlaTyyppiCbox;
    private JLabel metallikirjasinAlaTyyppiLbl;
    private EsikatseluJLabel metallikirjasinEsikatselu;
    private JLabel metallikirjasinEsikatseluLbl;
    private JComboBox metallikirjasinTyyppiCbox;
    private JLabel metallikirjasinTyyppiLbl;
    private JPanel muoto;
    private JScrollPane muotoScrollPane;
    private JPanel muotoValintaPanel;
    private EsikatseluJLabel mustaLbl;
    private ControlButton oikeaButton;
    private JButton openButton;
    private Checkbox os;
    private JLabel osLbl;
    private JTextField osTxt1;
    private JTextField osTxt2;
    private JTextField osTxt3;
    private JTextField osTxt4;
    private JLabel pintaLbl;
    private JButton printButton;
    private JButton poistaKoristeButton;
    private JRadioButton sahattu;
    private JButton saveButton;
    private JLabel sukunimiLbl;
    private SukunimiPanel esikatseluSukunimiMetallikirjasin;
    private JTextField sukunimiTxt;
    private Checkbox syntymaAika;
    private JLabel syntymaAikaLbl;
    private JTextField syntymaAikaTxt1;
    private JTextField syntymaAikaTxt2;
    private JTextField syntymaAikaTxt3;
    private JTextField syntymaAikaTxt4;
    private JLabel tasausLbl;
    private JPanel tekstitPanel;
    private JButton tallenna;
    private JPanel tausta;
    private JScrollPane taustaScrollPane;
    private JPanel taustaValintaPanel;
    private JButton tulosta;
    private JButton vaihdaKokoButton;
    private JButton vaihdaKaiverrettukirjasinFontti;
    private JButton vaihdaMetallikirjasinFontti;
    private JLabel valitseFonttiLbl;
    private JLabel valitseFonttiVariLbl;
    private JLabel valitseKivenVariLbl;
    private JLabel valitseKoristeLbl;
    private JLabel valitseMuotoLbl;
    private JLabel valitseTaustaLbl;
    private JLabel valitseVariLbl;
    private JPanel valitseVariPanel;
    private Checkbox vapaaTeksti;
    private JLabel vapaaTekstiLbl;
    private JTextField vapaaTxt1;
    private JTextField vapaaTxt2;
    private JTextField vapaaTxt3;
    private JTextField vapaaTxt4;
    private ControlButton vasenButton;
    private JLabel yhteysEmailLbl;
    private JTextField yhteysEmailTxt;
    private JLabel yhteysNimiLbl;
    private JTextField yhteysNimiTxt;
    private JLabel yhteysOtsikkoLbl;
    private JLabel yhteysPuhelinLbl;
    private JTextField yhteysPuhelinTxt;
    private JPanel yhteystiedotPanel;
    // End of variables declaration
   
}